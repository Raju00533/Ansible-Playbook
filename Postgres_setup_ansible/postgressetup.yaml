---

- name: Set Up and Secure Postgresql on ubuntu
  hosts: postgresql_servers
  become: true
  vars:
    postgresql_version: "14"
    postgresql_db: "mypgdb"
    postgresql_user: "my_user"
    postgresql_user_password: "user_password"
    postgresql_root_password: "root_Password"


  tasks: 
    - name: Update apt package index
      apt: 
        update_cache: yes

      
    - name: Install postgresql and contrib package
      apt: 
        name: 
          - postgresql-{{ postgresql_version }}
          - postgresql-contrib
        state: present

    - name: Ensure Postgresql service is started and enabled
      service: 
        name: postgresql
        state: started
        enabled: yes

    - name: wait for postgresql to start
      wait_for: 
        port: 5432
        delay: 10
        timeout: 300
    
    - name: Configure PostgreSQL to listen on all interfaces
      lineinfile:
        path: /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
        regexp: '^#?listen_addresses'
        line: "listen_addresses = '0.0.0.0'"
      notify: Restart PostgreSQL

    - name: Configure PostgreSQL to allow password authentication for local and remote connections
      blockinfile:
        path: /etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf
        block: |
          # Allow all IP addresses to connect with md5 authentication
          host    all             all             0.0.0.0/0            md5
          local   all             postgres                                md5
      notify: Restart PostgreSQL


    - name: Set Postgresql Root Password
      become: false
      postgresql_user:
        name: postgres
        password: "{{ postgresql_root_password }}"
        role_attr_flags: SUPERUSER  

    - name: create datbase
      postgresql_db: 
        name: "{{ postgresql_db }}"
        owner: "{{ postgresql_user }}"
        state: present

    - name: create user with password
      postgresql_user:
        name: "{{ postgresql_user }}"
        password: "{{ postgresql_user_password }}"
        role_atter_flag: LOGIN

    - name: Grant all privileges on database
      postgresql_privs:
        db: "{{ postgresql_db }}"
        role: "{{ postgresql_user }}"
        priv: ALL
        state: present

  handlers:
    - name: Restart postgresql
      service:
        name: postgresql
        state: restarted


      


